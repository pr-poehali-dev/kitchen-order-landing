import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';

interface QuizAnswer {
  question: number;
  answer: string;
  value?: any;
}

interface ContactData {
  name: string;
  phone: string;
  contactMethod: 'phone' | 'whatsapp';
}

const KitchenQuiz = () => {
  const [currentQuestion, setCurrentQuestion] = useState(1);
  const [answers, setAnswers] = useState<QuizAnswer[]>([]);
  const [selectedLayout, setSelectedLayout] = useState<string>('');
  const [selectedStyle, setSelectedStyle] = useState<string>('');
  const [selectedProject, setSelectedProject] = useState<string>('');
  const [selectedLength, setSelectedLength] = useState<string>('');
  const [selectedGift, setSelectedGift] = useState<string>('');
  const [showContactForm, setShowContactForm] = useState<boolean>(false);
  const [contactData, setContactData] = useState({
    name: '',
    phone: '',
    contactMethod: 'phone'
  });

  const layouts = [
    {
      id: 'straight',
      name: '–ü—Ä—è–º–∞—è',
      description: '–ö—É—Ö–Ω—è –≤–¥–æ–ª—å –æ–¥–Ω–æ–π —Å—Ç–µ–Ω—ã',
      image: 'https://cdn.poehali.dev/files/dae6672f-9acd-4704-a054-e1fadfb4a8cf.jpeg'
    },
    {
      id: 'corner',
      name: '–£–≥–ª–æ–≤–∞—è',
      description: 'L-–æ–±—Ä–∞–∑–Ω–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞',
      image: 'https://cdn.poehali.dev/files/00493a3d-2e57-43bf-8c8c-42cad84a8d3b.jpeg'
    },
    {
      id: 'u-shaped',
      name: '–ü-–æ–±—Ä–∞–∑–Ω–∞—è',
      description: '–ö—É—Ö–Ω—è –Ω–∞ —Ç—Ä—ë—Ö —Å—Ç–µ–Ω–∞—Ö',
      image: 'https://cdn.poehali.dev/files/0ef53cbf-930b-46cd-b669-1f316c9e8e4f.jpeg'
    },
    {
      id: 'bar',
      name: '–° –±–∞—Ä–Ω–æ–π —Å—Ç–æ–π–∫–æ–π',
      description: '–ö—É—Ö–Ω—è —Å –±–∞—Ä–Ω–æ–π –∑–æ–Ω–æ–π',
      image: 'https://cdn.poehali.dev/files/6099c05c-a1e8-4949-8331-c7e642f92078.jpeg'
    }
  ];

  const styles = [
    {
      id: 'modern',
      name: '–ú–æ–¥–µ—Ä–Ω',
      description: '–ú–∏–Ω–∏–º–∞–ª–∏–∑–º –∏ —á–∏—Å—Ç—ã–µ –ª–∏–Ω–∏–∏',
      image: '/img/5b6121e2-dbcd-4706-a7f8-d52823005ca9.jpg'
    },
    {
      id: 'scandinavian',
      name: '–°–∫–∞–Ω–¥–∏–Ω–∞–≤–∏—è',
      description: '–£—é—Ç –∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
      image: '/img/c2204b69-8502-4eec-9140-d8960e38b115.jpg'
    },
    {
      id: 'loft',
      name: '–õ–æ—Ñ—Ç',
      description: '–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å',
      image: '/img/c89ba1e8-728c-44f7-9f02-bb745ec872e7.jpg'
    },
    {
      id: 'neoclassic',
      name: '–ù–µ–æ–∫–ª–∞—Å—Å–∏–∫–∞',
      description: '–≠–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏',
      image: '/img/c6834518-8703-475d-a55d-63ee25622620.jpg'
    }
  ];

  const projectOptions = [
    {
      id: 'yes',
      name: '–î–∞',
      description: '–£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç'
    },
    {
      id: 'no',
      name: '–ù–µ—Ç',
      description: '–ù—É–∂–¥–∞—é—Å—å –≤ –ø–æ–º–æ—â–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π'
    },
    {
      id: 'idea',
      name: '–ï—Å—Ç—å –∏–¥–µ—è –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á—É —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å',
      description: '–ò–º–µ—é –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ –∂–µ–ª–∞–µ–º–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ'
    }
  ];

  const lengthOptions = [
    {
      id: '2-3m',
      name: '–æ—Ç 2 –¥–æ 3 –º–µ—Ç—Ä–æ–≤',
      description: '–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫—É—Ö–Ω—è'
    },
    {
      id: '3-5m',
      name: '–æ—Ç 3 –¥–æ 5 –º–µ—Ç—Ä–æ–≤',
      description: '–°—Ä–µ–¥–Ω—è—è –∫—É—Ö–Ω—è'
    },
    {
      id: '5-7m',
      name: '–æ—Ç 5 –¥–æ 7 –º–µ—Ç—Ä–æ–≤',
      description: '–ë–æ–ª—å—à–∞—è –∫—É—Ö–Ω—è'
    },
    {
      id: '7m+',
      name: '7+ –º–µ—Ç—Ä–æ–≤',
      description: '–û—á–µ–Ω—å –±–æ–ª—å—à–∞—è –∫—É—Ö–Ω—è'
    }
  ];

  const handleLayoutSelect = (layoutId: string) => {
    setSelectedLayout(layoutId);
    const newAnswer: QuizAnswer = {
      question: 1,
      answer: layoutId,
      value: layouts.find(l => l.id === layoutId)?.name
    };
    
    setAnswers(prev => [...prev.filter(a => a.question !== 1), newAnswer]);
  };

  const handleStyleSelect = (styleId: string) => {
    setSelectedStyle(styleId);
    const newAnswer: QuizAnswer = {
      question: 2,
      answer: styleId,
      value: styles.find(s => s.id === styleId)?.name
    };
    
    setAnswers(prev => [...prev.filter(a => a.question !== 2), newAnswer]);
  };

  const handleProjectSelect = (projectId: string) => {
    setSelectedProject(projectId);
    const newAnswer: QuizAnswer = {
      question: 3,
      answer: projectId,
      value: projectOptions.find(p => p.id === projectId)?.name
    };
    
    setAnswers(prev => [...prev.filter(a => a.question !== 3), newAnswer]);
  };

  const handleLengthSelect = (lengthId: string) => {
    setSelectedLength(lengthId);
    const newAnswer: QuizAnswer = {
      question: 4,
      answer: lengthId,
      value: lengthOptions.find(l => l.id === lengthId)?.name
    };
    
    setAnswers(prev => [...prev.filter(a => a.question !== 4), newAnswer]);
  };

  const nextQuestion = () => {
    if (currentQuestion === 1 && selectedLayout) {
      setCurrentQuestion(2);
    } else if (currentQuestion === 2 && selectedStyle) {
      setCurrentQuestion(3);
    } else if (currentQuestion === 3 && selectedProject) {
      setCurrentQuestion(4);
    } else if (currentQuestion === 4 && selectedLength) {
      setCurrentQuestion(5);
    } else if (currentQuestion === 5 && selectedGift) {
      setShowContactForm(true);
    }
  };

  const handleGiftSelect = (giftId: string) => {
    setSelectedGift(giftId);
    const newAnswer: QuizAnswer = {
      question: 5,
      answer: giftId === 'yes' ? '–ö–æ–Ω–µ—á–Ω–æ –¥–∞' : giftId === 'no' ? '–ù–µ—Ç' : '–ù–µ –Ω–∞–¥–æ',
      value: giftId
    };
    setAnswers([...answers.filter(a => a.question !== 5), newAnswer]);
  };

  const sendToTelegram = async (data: any) => {
    const TELEGRAM_BOT_TOKEN = 'YOUR_BOT_TOKEN'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    const TELEGRAM_CHAT_ID = '800581249'; // Chat ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Oleg
    
    const message = `
üéØ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å –∫–≤–∏–∑–∞!*

üë§ *–ò–º—è:* ${data.name}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${data.phone}
üìû *–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏:* ${data.contactMethod === 'phone' ? '–¢–µ–ª–µ—Ñ–æ–Ω' : 'WhatsApp'}

üìã *–û—Ç–≤–µ—Ç—ã –∫–≤–∏–∑–∞:*
${answers.map((answer, index) => 
  `${index + 1}. ${getQuestionText(answer.question)}: ${answer.answer}`
).join('\n')}

üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}
    `;

    try {
      const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: TELEGRAM_CHAT_ID,
          text: message,
          parse_mode: 'Markdown'
        })
      });

      if (response.ok) {
        return true;
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
      return false;
    }
  };

  const getQuestionText = (questionNumber: number): string => {
    const questions = {
      1: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ –∫—É—Ö–Ω–∏',
      2: '–°—Ç–∏–ª—å –∫—É—Ö–Ω–∏', 
      3: '–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞',
      4: '–î–ª–∏–Ω–∞ –≥–∞—Ä–Ω–∏—Ç—É—Ä–∞',
      5: '–ü–æ–¥–∞—Ä–æ–∫ (–∑–∞–º–µ—Ä + 3D –ø—Ä–æ–µ–∫—Ç)'
    };
    return questions[questionNumber] || `–í–æ–ø—Ä–æ—Å ${questionNumber}`;
  };

  const handleContactSubmit = async () => {
    const success = await sendToTelegram(contactData);
    
    if (success) {
      alert('‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
    } else {
      alert('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é.');
    }
  };

  const prevQuestion = () => {
    if (currentQuestion > 1) {
      setCurrentQuestion(currentQuestion - 1);
    }
  };

  return (
    <section className="py-16 bg-gradient-to-b from-gray-50 to-white">
      <div className="container mx-auto px-4">
        <div className="text-center mb-12">
          <h2 className="text-3xl font-bold text-gray-800 mb-4">
            üí∞ –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –∫—É—Ö–Ω—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∑–∞ 5 –º–∏–Ω—É—Ç
          </h2>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 5 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, 3D –ø—Ä–æ–µ–∫—Ç –∏ –∑–∞–º–µ—Ä –±–µ—Å–ø–ª–∞—Ç–Ω–æ
          </p>
          <div className="flex justify-center mt-6">
            <div className="flex space-x-2">
              {[1, 2, 3, 4, 5].map((step) => (
                <div
                  key={step}
                  className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                    step === currentQuestion
                      ? 'bg-orange-500 text-white'
                      : step < currentQuestion
                      ? 'bg-green-500 text-white'
                      : 'bg-gray-200 text-gray-500'
                  }`}
                >
                  {step}
                </div>
              ))}
            </div>
          </div>
        </div>

        {currentQuestion === 1 && (
          <div className="max-w-4xl mx-auto">
            <div className="text-center mb-8">
              <h3 className="text-2xl font-semibold text-gray-800 mb-4">
                –í–æ–ø—Ä–æ—Å 1 –∏–∑ 5: –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∫—É –∫—É—Ö–Ω–∏
              </h3>
              <p className="text-gray-600">
                –ö–∞–∫–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è?
              </p>
            </div>

            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8 max-w-3xl mx-auto">
              {layouts.map((layout) => (
                <Card
                  key={layout.id}
                  className={`cursor-pointer transition-all duration-300 hover:shadow-lg ${
                    selectedLayout === layout.id
                      ? 'ring-2 ring-orange-500 bg-orange-50'
                      : 'hover:shadow-md'
                  }`}
                  onClick={() => handleLayoutSelect(layout.id)}
                >
                  <div className="p-3">
                    <div className="aspect-square bg-gray-100 rounded-lg mb-2 overflow-hidden">
                      <img
                        src={layout.image}
                        alt={`–ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ ${layout.name}`}
                        className="w-full h-full object-contain"
                      />
                    </div>
                    <h4 className="font-semibold text-sm text-gray-800 mb-1 text-center">
                      {layout.name}
                    </h4>
                    {selectedLayout === layout.id && (
                      <div className="flex justify-center text-orange-600">
                        <span className="text-xs font-medium">‚úì –í—ã–±—Ä–∞–Ω–æ</span>
                      </div>
                    )}
                  </div>
                </Card>
              ))}
            </div>

            <div className="text-center">
              <Button
                onClick={nextQuestion}
                disabled={!selectedLayout}
                size="lg"
                className="bg-orange-500 hover:bg-orange-600 text-white px-8 py-3 text-lg"
              >
                –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Üí
              </Button>
            </div>
          </div>
        )}

        {currentQuestion === 2 && (
          <div className="max-w-4xl mx-auto">
            <div className="text-center mb-8">
              <h3 className="text-2xl font-semibold text-gray-800 mb-4">
                –í–æ–ø—Ä–æ—Å 2 –∏–∑ 5: –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∫—É—Ö–Ω–∏
              </h3>
              <p className="text-gray-600">
                –ö–∞–∫–æ–π —Å—Ç–∏–ª—å –≤–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?
              </p>
            </div>

            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8 max-w-3xl mx-auto">
              {styles.map((style) => (
                <Card
                  key={style.id}
                  className={`cursor-pointer transition-all duration-300 hover:shadow-lg ${
                    selectedStyle === style.id
                      ? 'ring-2 ring-orange-500 bg-orange-50'
                      : 'hover:shadow-md'
                  }`}
                  onClick={() => handleStyleSelect(style.id)}
                >
                  <div className="p-3">
                    <div className="aspect-square bg-gray-100 rounded-lg mb-2 overflow-hidden">
                      <img
                        src={style.image}
                        alt={`–°—Ç–∏–ª—å ${style.name}`}
                        className="w-full h-full object-cover"
                      />
                    </div>
                    <h4 className="font-semibold text-sm text-gray-800 mb-1 text-center">
                      {style.name}
                    </h4>
                    {selectedStyle === style.id && (
                      <div className="flex justify-center text-orange-600">
                        <span className="text-xs font-medium">‚úì –í—ã–±—Ä–∞–Ω–æ</span>
                      </div>
                    )}
                  </div>
                </Card>
              ))}
            </div>

            <div className="flex justify-center space-x-4">
              <Button
                onClick={prevQuestion}
                variant="outline"
                size="lg"
                className="px-8 py-3 text-lg"
              >
                ‚Üê –ù–∞–∑–∞–¥
              </Button>
              <Button
                onClick={nextQuestion}
                disabled={!selectedStyle}
                size="lg"
                className="bg-orange-500 hover:bg-orange-600 text-white px-8 py-3 text-lg"
              >
                –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Üí
              </Button>
            </div>
          </div>
        )}

        {currentQuestion === 3 && (
          <div className="max-w-4xl mx-auto">
            <div className="text-center mb-8">
              <h3 className="text-2xl font-semibold text-gray-800 mb-4">
                –í–æ–ø—Ä–æ—Å 3 –∏–∑ 5: –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç –∫—É—Ö–Ω–∏?
              </h3>
              <p className="text-gray-600">
                –ü–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –ª—É—á—à–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8 max-w-3xl mx-auto">
              {projectOptions.map((option) => (
                <Card
                  key={option.id}
                  className={`cursor-pointer transition-all duration-300 hover:shadow-lg ${
                    selectedProject === option.id
                      ? 'ring-2 ring-orange-500 bg-orange-50'
                      : 'hover:shadow-md'
                  }`}
                  onClick={() => handleProjectSelect(option.id)}
                >
                  <div className="p-6 text-center">
                    <h4 className="font-semibold text-lg text-gray-800 mb-2">
                      {option.name}
                    </h4>
                    <p className="text-gray-600 text-sm">
                      {option.description}
                    </p>
                    {selectedProject === option.id && (
                      <div className="mt-3 flex justify-center text-orange-600">
                        <span className="text-sm font-medium">‚úì –í—ã–±—Ä–∞–Ω–æ</span>
                      </div>
                    )}
                  </div>
                </Card>
              ))}
            </div>

            <div className="flex justify-center space-x-4">
              <Button
                onClick={prevQuestion}
                variant="outline"
                size="lg"
                className="px-8 py-3 text-lg"
              >
                ‚Üê –ù–∞–∑–∞–¥
              </Button>
              <Button
                onClick={nextQuestion}
                disabled={!selectedProject}
                size="lg"
                className="bg-orange-500 hover:bg-orange-600 text-white px-8 py-3 text-lg"
              >
                –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Üí
              </Button>
            </div>
          </div>
        )}

        {currentQuestion === 4 && (
          <div className="max-w-4xl mx-auto">
            <div className="text-center mb-8">
              <h3 className="text-2xl font-semibold text-gray-800 mb-4">
                –í–æ–ø—Ä–æ—Å 4 –∏–∑ 5: –£–∫–∞–∂–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—É—é –¥–ª–∏–Ω—É –∫—É—Ö–æ–Ω–Ω–æ–≥–æ –≥–∞—Ä–Ω–∏—Ç—É—Ä–∞
              </h3>
              <p className="text-gray-600">
                –ü–æ–º–æ–∂–µ—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8 max-w-4xl mx-auto">
              {lengthOptions.map((option) => (
                <Card
                  key={option.id}
                  className={`cursor-pointer transition-all duration-300 hover:shadow-lg ${
                    selectedLength === option.id
                      ? 'ring-2 ring-orange-500 bg-orange-50'
                      : 'hover:shadow-md'
                  }`}
                  onClick={() => handleLengthSelect(option.id)}
                >
                  <div className="p-6 text-center">
                    <h4 className="font-semibold text-lg text-gray-800 mb-2">
                      {option.name}
                    </h4>
                    <p className="text-gray-600 text-sm">
                      {option.description}
                    </p>
                    {selectedLength === option.id && (
                      <div className="mt-3 flex justify-center text-orange-600">
                        <span className="text-sm font-medium">‚úì –í—ã–±—Ä–∞–Ω–æ</span>
                      </div>
                    )}
                  </div>
                </Card>
              ))}
            </div>

            <div className="flex justify-center space-x-4">
              <Button
                onClick={prevQuestion}
                variant="outline"
                size="lg"
                className="px-8 py-3 text-lg"
              >
                ‚Üê –ù–∞–∑–∞–¥
              </Button>
              <Button
                onClick={nextQuestion}
                disabled={!selectedLength}
                size="lg"
                className="bg-orange-500 hover:bg-orange-600 text-white px-8 py-3 text-lg"
              >
                –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Üí
              </Button>
            </div>
          </div>
        )}

        {currentQuestion === 5 && !showContactForm && (
          <div className="max-w-3xl mx-auto">
            <div className="text-center mb-8">
              <h3 className="text-2xl font-semibold text-gray-800 mb-4">
                –í–æ–ø—Ä–æ—Å 5 –∏–∑ 5: –ó–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–≤–∏–∑–∞ –¥–∞—Ä–∏–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–º–µ—Ä + 3D –ø—Ä–æ–µ–∫—Ç
              </h3>
              <p className="text-lg text-gray-600 mb-8">
                üéÅ –ó–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –≤–∞–º–∏?
              </p>
            </div>

            <div className="grid md:grid-cols-3 gap-3 mb-8 max-w-xl mx-auto">
              {[
                { id: 'yes', name: '–ö–æ–Ω–µ—á–Ω–æ –¥–∞!', description: '–ü–æ–ª—É—á–∏—Ç—å –∑–∞–º–µ—Ä –∏ –ø—Ä–æ–µ–∫—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ', emoji: '‚úÖ' },
                { id: 'no', name: '–ù–µ—Ç', description: '–¢–æ–ª—å–∫–æ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏', emoji: '‚ùå' },
                { id: 'later', name: '–ù–µ –Ω–∞–¥–æ', description: '–ü–µ—Ä–µ–¥—É–º–∞–ª(–∞)', emoji: 'ü§î' }
              ].map((option) => (
                <Card
                  key={option.id}
                  className={`p-3 cursor-pointer transition-all border-2 ${
                    selectedGift === option.id
                      ? 'border-orange-500 bg-orange-50'
                      : 'border-gray-200 hover:border-orange-300'
                  }`}
                  onClick={() => handleGiftSelect(option.id)}
                >
                  <div className="text-center">
                    <div className="text-2xl mb-2">{option.emoji}</div>
                    <h4 className="font-semibold text-gray-800 mb-1 text-sm">{option.name}</h4>
                    <p className="text-xs text-gray-600">{option.description}</p>
                    {selectedGift === option.id && (
                      <div className="mt-3 bg-orange-500 text-white px-3 py-1 rounded-full text-xs inline-flex items-center">
                        <span className="text-sm font-medium">‚úì –í—ã–±—Ä–∞–Ω–æ</span>
                      </div>
                    )}
                  </div>
                </Card>
              ))}
            </div>

            <div className="flex justify-center space-x-4">
              <Button
                onClick={prevQuestion}
                variant="outline"
                size="lg"
                className="px-8 py-3 text-lg"
              >
                ‚Üê –ù–∞–∑–∞–¥
              </Button>
              <Button
                onClick={nextQuestion}
                disabled={!selectedGift}
                size="lg"
                className="bg-orange-500 hover:bg-orange-600 text-white px-8 py-3 text-lg"
              >
                –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á–µ—Ç ‚Üí
              </Button>
            </div>
          </div>
        )}

        {showContactForm && (
          <div className="max-w-md mx-auto">
            <div className="text-center mb-8">
              <h3 className="text-2xl font-semibold text-gray-800 mb-4">
                üéâ –û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
              </h3>
              <p className="text-gray-600">
                –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞
              </p>
            </div>

            <Card className="p-6">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –í–∞—à–µ –∏–º—è
                  </label>
                  <input
                    type="text"
                    value={contactData.name}
                    onChange={(e) => setContactData(prev => ({ ...prev, name: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                  </label>
                  <input
                    type="tel"
                    value={contactData.phone}
                    onChange={(e) => setContactData(prev => ({ ...prev, phone: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500"
                    placeholder="+7 (999) 123-45-67"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏
                  </label>
                  <div className="flex space-x-2">
                    <Button
                      type="button"
                      variant={contactData.contactMethod === 'phone' ? 'default' : 'outline'}
                      onClick={() => setContactData(prev => ({ ...prev, contactMethod: 'phone' }))}
                      className="flex-1"
                    >
                      üìû –¢–µ–ª–µ—Ñ–æ–Ω
                    </Button>
                    <Button
                      type="button"
                      variant={contactData.contactMethod === 'whatsapp' ? 'default' : 'outline'}
                      onClick={() => setContactData(prev => ({ ...prev, contactMethod: 'whatsapp' }))}
                      className="flex-1"
                    >
                      üí¨ WhatsApp
                    </Button>
                  </div>
                </div>

                <Button
                  onClick={handleContactSubmit}
                  disabled={!contactData.name || !contactData.phone}
                  className="w-full bg-orange-500 hover:bg-orange-600 text-white py-3 text-lg"
                >
                  –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á–µ—Ç –∏ –ø–æ–¥–∞—Ä–æ–∫ üéÅ
                </Button>
              </div>
            </Card>
          </div>
        )}
      </div>
    </section>
  );
};

export default KitchenQuiz;